{"version":3,"file":"static/js/593.c6828e2a.chunk.js","mappings":"kTAGAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CACNC,QALY,mCAMZC,SAAU,UAIDC,EAAmB,mCAAG,oGACVJ,EAAAA,EAAAA,IAAA,qBAAgCC,GADtB,cAC3BI,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,iBAAoBS,GAAWR,GADvB,cACzBI,EADyB,yBAExBA,EAASC,MAFe,2CAAH,sDAKjBI,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAAA,EAAAA,IAAA,8BAAiCW,GAAaV,GAD3C,cACpBI,EADoB,yBAEnBA,EAASC,KAAKC,SAFK,2CAAH,sDAKZK,EAAc,mCAAG,WAAMH,GAAN,uFACLT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,aAAuCR,GADlC,cACtBI,EADsB,yBAErBA,EAASC,KAAKO,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAAML,GAAN,uFACRT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,aAAuCR,GAD/B,cACzBI,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qD,qIC3BjBQ,EAAOC,EAAAA,GAAAA,GAAH,wFAMJC,EAAOD,EAAAA,GAAAA,GAAH,8GAMJE,GAAcF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,yhBASE,SAAAI,GAAK,OACvBA,EAAMC,MAAN,+CAC4CD,EAAMC,MADlD,oBAEWC,EAFX,IADuB,IAoB/BJ,EAAYK,UAAY,CACtBF,MAAOE,IAAAA,OACPD,YAAaC,IAAAA,Q,aCff,EA7BkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACX,EAAD,UACGS,EAAMG,KAAI,SAAAC,GAAK,OACd,SAACX,EAAD,WACE,UAACC,EAAD,CACEW,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMP,GACfJ,MAAOO,EAAMK,YAHf,UAIC,sBACML,EAAMM,UANJN,EAAME,GADH,KAarB,C,sLCnBYK,EAAOnB,EAAAA,GAAAA,KAAH,uUAkBJoB,GAAOpB,EAAAA,EAAAA,IAAOqB,EAAAA,IAAPrB,CAAH,gI,SCjBJsB,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAKlC,OACE,UAACL,EAAD,CAAMM,SALa,SAAAC,GACnBA,EAAEC,gBACH,EAGC,WACE,wBAAI,kBACJ,SAAC,EAAAC,cAAD,CACEC,KAAK,OACLC,gBAAiB,IACjBP,MAAOA,EACPC,SAAU,SAAAE,GAAC,OAAIF,EAASE,EAAEK,OAAOR,MAAtB,EACXjB,YAAY,eAEd,SAACc,EAAD,MAGL,E,UCcD,EA9Be,WACb,OAA0CY,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM1C,EAAYyC,EAAaE,IAAI,UAAY,GAmB/C,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAM,mCAAG,8GAEU9C,EAAAA,EAAAA,IAAaC,GAFvB,OAEL8C,EAFK,OAGXP,EAAiBO,GAHN,gDAKXC,QAAQC,MAAR,MALW,yDAAH,qDAQZH,GACD,GAAE,CAAC7C,KAGF,4BACE,SAAC2B,EAAD,CAAYC,MAAO5B,EAAW6B,SAnBR,SAAAoB,GAExBP,EAD6B,KAAVO,GAAgB,CAAEA,MAAAA,GAEtC,KAiBG,SAACC,EAAA,EAAD,CAAWrC,MAAOyB,MAGvB,C","sources":["components/Api/Api.jsx","components/MovieList/MoviesList.styled.js","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a4e0e6c94492c515df52f4a6ebcc54c7';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, params);\n  return response.data;\n};\n\nexport const handleSearch = async movieName => {\n  const response = await axios.get(`/search/movie?query=${movieName}`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`, params);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?`, params);\n  return response.data.results;\n};","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport propTypes from 'prop-types';\nimport placeholder from '../images/placeholder.png';\n\nexport const List = styled.ul`\n  list-style: none;\n  font-size: 1.1rem;\n  font-weight: 500;\n`;\n\nexport const Item = styled.li`\n  padding: 5px 12px;\n  border-bottom: 1px solid transparent;\n  position: relative;\n`;\n\nexport const LinkDetails = styled(Link)`\n  color: #000;\n  text-decoration: none;\n  margin: 1px;\n\n  @media screen and (min-width: 768px) {\n    &:hover::after,\n    &:focus::after {\n      content: '';\n      background-image: ${props =>\n        props.cover\n          ? `url('https://image.tmdb.org/t/p/w500/${props.cover}')`\n          : `url(${placeholder})`};\n\n      background-size: cover;\n      width: 160px;\n      height: 240px;\n      display: block;\n      border-radius: 4px;\n      border: 1px solid rgba(43, 134, 197);\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n      position: absolute;\n      top: -140px;\n      left: 400px;\n      z-index: 1;\n    }\n  }\n`;\n\nLinkDetails.propTypes = {\n  cover: propTypes.string,\n  placeholder: propTypes.string,\n};\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, LinkDetails } from './MoviesList.styled';\n\nconst MovieList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(movie => (\n        <Item key={movie.id}>\n          <LinkDetails\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n            cover={movie.poster_path}\n          >\n            üéûÔ∏è {movie.title}\n          </LinkDetails>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\nimport { FcSearch } from 'react-icons/fc';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n  padding: 0 16px;\n  flex-wrap: wrap;\n\n  input {\n    font-size: 1rem;\n    padding: 8px 32px 8px 8px;\n    width: 250px;\n    background-color: transparent;\n    border: none;\n    border-bottom: 2px solid #2aaaeb;\n    outline: none;\n  }\n`;\n\nexport const Icon = styled(FcSearch)`\n  width: 25px;\n  height: 25px;\n  position: relative;\n  right: 56px;\n  z-index: 1;\n  opacity: 0.7;\n`;\n","import { DebounceInput } from 'react-debounce-input';\nimport propTypes from 'prop-types';\nimport { Form, Icon } from './SearchForm.styled';\n\nexport const SearchForm = ({ value, onChange }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <h2>Movie Search</h2>\n      <DebounceInput\n        type=\"text\"\n        debounceTimeout={500}\n        value={value}\n        onChange={e => onChange(e.target.value)}\n        placeholder=\"type here\"\n      />\n      <Icon />\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  value: propTypes.string,\n  onChange: propTypes.func,\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { handleSearch } from '../components/Api/Api';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport MovieList from '../components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') || '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' && { query };\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const movies = await handleSearch(movieName);\n        setSearchResults(movies);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    search();\n  }, [movieName]);\n\n  return (\n    <div>\n      <SearchForm value={movieName} onChange={updateQueryString} />\n      <MovieList films={searchResults} />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","params","api_key","language","fetchTrendingMovies","response","data","results","fetchMovieDetails","movieId","handleSearch","movieName","fetchMovieCast","cast","fetchMovieReviews","List","styled","Item","LinkDetails","Link","props","cover","placeholder","propTypes","films","location","useLocation","map","movie","to","id","state","from","poster_path","title","Form","Icon","FcSearch","SearchForm","value","onChange","onSubmit","e","preventDefault","DebounceInput","type","debounceTimeout","target","useState","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","get","useEffect","search","movies","console","error","query","MovieList"],"sourceRoot":""}